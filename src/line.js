const { createCanvas, loadImage } = require('canvas');

// Define the coordinates
const coordinates = [
    [ -8, 283 ] ,
[ -2, 304 ] ,
[ -2, 304 ] ,
[ -3, 311 ] ,
[ -3, 311 ] ,
[ -3, 327 ] ,
[ -2, 343 ] ,
[ -2, 343 ] ,
[ -4, 358 ] ,
[ -4, 366 ] ,
[ -4, 366 ] ,
[ -4, 376 ] ,
[ -4, 376 ] ,
[ -5, 393 ] ,
[ -5, 393 ] ,
[ -6, 406 ] ,
[ -6, 406 ] ,
[ -6, 415 ] ,
[ -6, 415 ] ,
[ -2, 424 ] ,
[ 3, 428 ] ,
[ 8, 429 ] ,
[ 8, 429 ] ,
[ 14, 427 ] ,
[ 18, 423 ] ,
[ 18, 423 ] ,
[ 22, 418 ] ,
[ 24, 413 ] ,
[ 24, 413 ] ,
[ 26, 405 ] ,
[ 29, 394 ] ,
[ 29, 394 ] ,
[ 31, 386 ] ,
[ 31, 386 ] ,
[ 33, 375 ] ,
[ 33, 375 ] ,
[ 33, 375 ] ,
[ 40, 356 ] ,
[ 42, 345 ] ,
[ 42, 345 ] ,
[ 44, 337 ] ,
[ 44, 337 ] ,
[ 47, 327 ] ,
[ 47, 327 ] ,
[ 50, 317 ] ,
[ 50, 317 ] ,
[ 51, 309 ] ,
[ 56, 297 ] ,
[ 56, 297 ] ,
[ 58, 288 ] ,
[ 58, 288 ] ,
[ 61, 279 ] ,
[ 61, 271 ] ,
[ 61, 271 ] ,
[ 63, 258 ] ,
[ 64, 251 ] ,
[ 64, 251 ] ,
[ 66, 246 ] ,
[ 73, 242 ] ,
[ 73, 242 ] ,
[ 80, 242 ] ,
[ 80, 242 ] ,
[ 92, 244 ] ,
[ 92, 244 ] ,
[ 114, 246 ] ,
[ 114, 246 ] ,
[ 123, 247 ] ,
[ 123, 247 ] ,
[ 133, 249 ] ,
[ 133, 249 ] ,
[ 140, 258 ] ,
[ 140, 258 ] ,
[ 141, 268 ] ,
[ 143, 274 ] ,
[ 143, 274 ] ,
[ 143, 274 ] ,
[ 148, 281 ] ,
[ 155, 293 ] ,
[ 161, 300 ] ,
[ 161, 300 ] ,
[ 161, 300 ] ,
[ 166, 306 ] ,
[ 166, 306 ] ,
[ 173, 314 ] ,
[ 173, 314 ] ,
[ 186, 327 ] ,
[ 186, 327 ] ,
[ 186, 327 ] ,
[ 201, 333 ] ,
[ 201, 333 ] ,
[ 201, 333 ] ,
[ 211, 334 ] ,
[ 211, 334 ] ,
[ 211, 334 ] ,
[ 211, 334 ] ,
[ 211, 334 ] ,
[ 211, 334 ] ,
[ 211, 334 ] ,
[ 220, 331 ] ,
[ 220, 331 ] ,
[ 231, 301 ] ,
[ 231, 301 ] ,
[ 230, 279 ] ,
[ 230, 279 ] ,
[ 230, 279 ] ,
[ 230, 279 ] ,
[ 232, 254 ] ,
[ 232, 254 ] ,
[ 235, 251 ] ,
[ 249, 246 ] ,
[ 249, 246 ] ,
[ 262, 248 ] ,
[ 262, 248 ] ,
[ 271, 249 ] ,
[ 271, 249 ] ,
[ 283, 251 ] ,
[ 291, 252 ] ,
[ 291, 252 ] ,
[ 302, 254 ] ,
[ 302, 254 ] ,
[ 319, 257 ] ,
[ 335, 260 ] ,
[ 335, 260 ] ,
[ 347, 262 ] ,
[ 354, 264 ] ,
[ 354, 264 ] ,
[ 359, 267 ] ,
[ 359, 267 ] ,
[ 363, 277 ] ,
[ 361, 281 ] ,
[ 361, 281 ] ,
[ 363, 289 ] ,
[ 363, 289 ] ,
[ 360, 297 ] ,
[ 360, 297 ] ,
[ 360, 307 ] ,
[ 356, 323 ] ,
[ 356, 323 ] ,
[ 354, 334 ] ,
[ 351, 346 ] ,
[ 351, 346 ] ,
[ 347, 349 ] ,
[ 339, 350 ] ,
[ 339, 350 ] ,
[ 324, 345 ] ,
[ 324, 345 ] ,
[ 304, 343 ] ,
[ 304, 343 ] ,
[ 291, 340 ] ,
[ 291, 340 ] ,
[ 284, 339 ] ,
[ 279, 336 ] ,
[ 279, 336 ] ,
[ 276, 325 ] ,
[ 276, 325 ] ,
[ 280, 319 ] ,
[ 280, 319 ] ,
[ 280, 319 ] ,
[ 290, 315 ] ,
[ 299, 317 ] ,
[ 299, 317 ] ,
[ 304, 317 ] ,
[ 304, 317 ] ,
[ 313, 313 ] ,
[ 313, 313 ] ,
[ 317, 307 ] ,
[ 317, 307 ] ,
[ 317, 304 ] ,
[ 317, 304 ] ,
[ 314, 294 ] ,
[ 314, 294 ] ,
[ 307, 289 ] ,
[ 307, 289 ] ,
[ 296, 287 ] ,
[ 296, 287 ] ,
[ 287, 285 ] ,
[ 287, 285 ] ,
[ 277, 284 ] ,
[ 277, 284 ] ,
[ 268, 285 ] ,
[ 268, 285 ] ,
[ 268, 285 ] ,
[ 260, 291 ] ,
[ 260, 291 ] ,
[ 256, 302 ] ,
[ 256, 302 ] ,
[ 254, 314 ] ,
[ 254, 314 ] ,
[ 254, 323 ] ,
[ 254, 323 ] ,
[ 254, 323 ] ,
[ 257, 330 ] ,
[ 257, 330 ] ,
[ 257, 330 ] ,
[ 280, 339 ] ,
[ 280, 339 ] ,
[ 280, 339 ] ,
[ 293, 342 ] ,
[ 293, 342 ] ,
[ 304, 344 ] ,
[ 304, 344 ] ,
[ 304, 344 ] ,
[ 320, 348 ] ,
[ 320, 348 ] ,
[ 320, 348 ] ,
[ 329, 355 ] ,
[ 329, 355 ] ,
[ 329, 355 ] ,
[ 329, 355 ] ,
[ 329, 355 ] ,
[ 329, 355 ] ,
[ 329, 355 ] ,
[ 326, 403 ] ,
[ 326, 403 ] ,
[ 323, 419 ] ,
[ 323, 419 ] ,
[ 323, 419 ] ,
[ 321, 435 ] ,
[ 321, 435 ] ,
[ 321, 435 ] ,
[ 321, 435 ] ,
[ 318, 460 ] ,
[ 318, 460 ] ,
[ 314, 477 ] ,
[ 314, 477 ] ,
[ 312, 488 ] ,
[ 312, 488 ] ,
[ 308, 504 ] ,
[ 308, 504 ] ,
[ 308, 504 ] ,
[ 294, 513 ] ,
[ 294, 513 ] ,
[ 294, 513 ] ,
[ 282, 510 ] ,
[ 282, 510 ] ,
[ 270, 511 ] ,
[ 270, 511 ] ,
[ 259, 509 ] ,
[ 259, 509 ] ,
[ 259, 509 ] ,
[ 247, 507 ] ,
[ 247, 507 ] ,
[ 247, 507 ] ,
[ 231, 505 ] ,
[ 231, 505 ] ,
[ 216, 502 ] ,
[ 216, 502 ] ,
[ 202, 500 ] ,
[ 202, 500 ] ,
[ 188, 496 ] ,
[ 188, 496 ] ,
[ 188, 496 ] ,
[ 175, 494 ] ,
[ 175, 494 ] ,
[ 175, 494 ] ,
[ 163, 492 ] ,
[ 163, 492 ] ,
[ 163, 492 ] ,
[ 163, 492 ] ,
[ 141, 488 ] ,
[ 141, 488 ] ,
[ 141, 488 ] ,
[ 127, 486 ] ,
[ 127, 486 ] ,
[ 127, 486 ] ,
[ 127, 486 ] ,
[ 98, 482 ] ,
[ 98, 482 ] ,
[ 83, 479 ] ,
[ 83, 479 ] ,
[ 68, 476 ] ,
[ 68, 476 ] ,
[ 59, 474 ] ,
[ 59, 474 ] ,
[ 48, 471 ] ,
[ 48, 471 ] ,
[ 36, 469 ] ,
[ 36, 469 ] ,
[ 25, 468 ] ,
[ 25, 468 ] ,
[ 25, 468 ] ,
[ 25, 468 ] ,
[ 25, 468 ] ,
[ 25, 468 ] ,
[ -12, 461 ] ,
[ -12, 461 ] ,
[ -19, 460 ] ,
[ -25, 459 ] ,
[ -25, 459 ] ,
[ -34, 457 ] ,
[ -34, 457 ] ,
[ -46, 454 ] ,
[ -54, 453 ] ,
[ -54, 453 ] ,
[ -54, 453 ] ,
[ -62, 449 ] ,
[ -62, 449 ] ,
[ -66, 436 ] ,
[ -66, 436 ] ,
[ -63, 427 ] ,
[ -63, 427 ] ,
[ -67, 419 ] ,
[ -67, 419 ] ,
[ -65, 410 ] ,
[ -65, 410 ] ,
[ -64, 407 ] ,
[ -64, 407 ] ,
[ -66, 403 ] ,
[ -66, 403 ] ,
[ -62, 388 ] ,
[ -62, 385 ] ,
[ -62, 385 ] ,
[ -60, 379 ] ,
[ -59, 377 ] ,
[ -59, 377 ] ,
[ -59, 373 ] ,
[ -59, 373 ] ,
[ -50, 356 ] ,
[ -50, 356 ] ,
[ -50, 354 ] ,
[ -51, 347 ] ,
[ -51, 347 ] ,
[ -45, 337 ] ,
[ -45, 337 ] ,
[ -45, 328 ] ,
[ -45, 328 ] ,
[ -42, 316 ] ,
[ -42, 316 ] ,
[ -40, 312 ] ,
[ -40, 312 ] ,
[ -40, 312 ] ,
[ -40, 312 ] ,
[ -40, 312 ] ,
[ -40, 312 ] ,
[ -40, 312 ] ,
[ -40, 312 ] ,
[ -40, 312 ] ,
[ -30, 261 ] ,
[ -30, 261 ] ,
[ -29, 251 ] ,
[ -29, 251 ] ,
[ -29, 251 ] ,
[ -29, 251 ] ,
[ -23, 216 ] ,
[ -23, 216 ] ,
[ -21, 203 ] ,
[ -21, 203 ] ,
[ -18, 194 ] ,
[ -14, 188 ] ,
[ -14, 188 ] ,
[ -5, 184 ] ,
[ 1, 186 ] ,
[ 1, 186 ] ,
[ 5, 185 ] ,
[ 15, 183 ] ,
[ 15, 183 ] ,
[ 27, 187 ] ,
[ 27, 187 ] ,
[ 36, 188 ] ,
[ 36, 188 ] ,
[ 36, 188 ] ,
[ 52, 194 ] ,
[ 52, 194 ] ,
[ 56, 204 ] ,
[ 56, 204 ] ,
[ 54, 211 ] ,
[ 47, 214 ] ,
[ 47, 214 ] ,
[ 47, 214 ] ,
[ 39, 214 ] ,
[ 39, 214 ] ,
[ 31, 212 ] ,
[ 31, 212 ] ,
[ 21, 214 ] ,
[ 11, 220 ] ,
[ 11, 220 ] ,
[ 2, 231 ] ,
[ 2, 231 ] ,
[ 2, 231 ] ,
[ 2, 231 ] ,
[ 2, 231 ] ,
[ 2, 231 ] ,
[ -6, 267 ] ,
[ -6, 267 ] ,
[ -6, 275 ] ,
[ -8, 283 ] ,
[ -8, 283 ],
[null, null],
[ 51, 330 ] ,
    [ 51, 330 ] ,
    [ 54, 325 ] ,
    [ 54, 325 ] ,
    [ 61, 313 ] ,
    [ 61, 313 ] ,
    [ 66, 304 ] ,
    [ 66, 304 ] ,
    [ 71, 295 ] ,
    [ 78, 283 ] ,
    [ 78, 283 ] ,
    [ 78, 283 ] ,
    [ 82, 275 ] ,
    [ 88, 265 ] ,
    [ 88, 265 ] ,
    [ 95, 251 ] ,
    [ 95, 251 ] ,
    [ 100, 239 ] ,
    [ 100, 239 ] ,
    [ 100, 239 ] ,
    [ 107, 226 ] ,
    [ 115, 210 ] ,
    [ 115, 210 ] ,
    [ 115, 210 ] ,
    [ 115, 210 ] ,
    [ 115, 210 ] ,
    [ 115, 210 ] ,
    [ 115, 210 ] ,
    [ 115, 210 ] ,
    [ 115, 210 ] ,
    [ 153, 234 ] ,
    [ 165, 257 ] ,
    [ 165, 257 ] ,
    [ 173, 272 ] ,
    [ 173, 272 ] ,
    [ 175, 279 ] ,
    [ 175, 279 ] ,
    [ 179, 286 ] ,
    [ 179, 286 ] ,
    [ 179, 286 ] ,
    [ 179, 286 ] ,
    [ 179, 286 ] ,
    [ 179, 286 ] ,
    [ 179, 286 ] ,
    [ 206, 311 ] ,
    [ 206, 311 ] ,
    [ 206, 311 ] ,
    [ 213, 313 ] ,
    [ 213, 313 ] ,
    [ 218, 323 ] ,
    [ 218, 323 ] ,
    [ 216, 328 ] ,
    [ 216, 328 ] ,
    [ 213, 344 ] ,
    [ 213, 344 ] ,
    [ 210, 352 ] ,
    [ 210, 352 ] ,
    [ 207, 363 ] ,
    [ 207, 363 ] ,
    [ 204, 369 ] ,
    [ 204, 369 ] ,
    [ 190, 376 ] ,
    [ 190, 376 ] ,
    [ 190, 376 ] ,
    [ 186, 375 ] ,
    [ 186, 375 ] ,
    [ 178, 366 ] ,
    [ 178, 366 ] ,
    [ 178, 357 ] ,
    [ 178, 357 ] ,
    [ 174, 348 ] ,
    [ 174, 348 ] ,
    [ 169, 340 ] ,
    [ 169, 340 ] ,
    [ 169, 340 ] ,
    [ 169, 340 ] ,
    [ 169, 340 ] ,
    [ 169, 340 ] ,
    [ 169, 340 ] ,
    [ 152, 304 ] ,
    [ 149, 298 ] ,
    [ 149, 298 ] ,
    [ 149, 298 ] ,
    [ 143, 292 ] ,
    [ 134, 289 ] ,
    [ 134, 289 ] ,
    [ 126, 291 ] ,
    [ 126, 291 ] ,
    [ 114, 298 ] ,
    [ 114, 298 ] ,
    [ 106, 308 ] ,
    [ 101, 314 ] ,
    [ 101, 314 ] ,
    [ 97, 322 ] ,
    [ 94, 329 ] ,
    [ 94, 329 ] ,
    [ 85, 341 ] ,
    [ 77, 358 ] ,
    [ 77, 358 ] ,
    [ 69, 374 ] ,
    [ 66, 387 ] ,
    [ 66, 387 ] ,
    [ 67, 395 ] ,
    [ 67, 395 ] ,
    [ 67, 395 ] ,
    [ 67, 395 ] ,
    [ 67, 395 ] ,
    [ 67, 395 ] ,
    [ 92, 411 ] ,
    [ 92, 411 ] ,
    [ 92, 411 ] ,
    [ 92, 411 ] ,
    [ 92, 411 ] ,
    [ 92, 411 ] ,
    [ 128, 420 ] ,
    [ 128, 420 ] ,
    [ 143, 425 ] ,
    [ 154, 427 ] ,
    [ 154, 427 ] ,
    [ 161, 429 ] ,
    [ 161, 429 ] ,
    [ 161, 429 ] ,
    [ 173, 432 ] ,
    [ 185, 433 ] ,
    [ 185, 433 ] ,
    [ 197, 432 ] ,
    [ 207, 427 ] ,
    [ 207, 427 ] ,
    [ 210, 422 ] ,
    [ 210, 422 ] ,
    [ 214, 413 ] ,
    [ 216, 405 ] ,
    [ 216, 405 ] ,
    [ 218, 397 ] ,
    [ 218, 397 ] ,
    [ 223, 383 ] ,
    [ 227, 370 ] ,
    [ 227, 370 ] ,
    [ 229, 362 ] ,
    [ 229, 362 ] ,
    [ 231, 355 ] ,
    [ 231, 355 ] ,
    [ 229, 346 ] ,
    [ 225, 341 ] ,
    [ 225, 341 ] ,
    [ 218, 337 ] ,
    [ 218, 337 ] ,
    [ 209, 334 ] ,
    [ 201, 332 ] ,
    [ 201, 332 ] ,
    [ 193, 326 ] ,
    [ 193, 326 ] ,
    [ 189, 317 ] ,
    [ 186, 310 ] ,
    [ 186, 310 ] ,
    [ 186, 310 ] ,
    [ 183, 301 ] ,
    [ 180, 293 ] ,
    [ 180, 293 ] ,
    [ 175, 284 ] ,
    [ 175, 284 ] ,
    [ 171, 273 ] ,
    [ 171, 273 ] ,
    [ 166, 265 ] ,
    [ 160, 251 ] ,
    [ 160, 251 ] ,
    [ 155, 246 ] ,
    [ 155, 246 ] ,
    [ 149, 240 ] ,
    [ 149, 240 ] ,
    [ 139, 238 ] ,
    [ 139, 238 ] ,
    [ 125, 240 ] ,
    [ 125, 240 ] ,
    [ 125, 240 ] ,
    [ 125, 240 ] ,
    [ 125, 240 ] ,
    [ 125, 240 ] ,
    [ 99, 269 ] ,
    [ 94, 278 ] ,
    [ 94, 278 ] ,
    [ 84, 294 ] ,
    [ 76, 309 ] ,
    [ 76, 309 ] ,
    [ 70, 317 ] ,
    [ 70, 317 ] ,
    [ 70, 317 ] ,
    [ 65, 326 ] ,
    [ 65, 326 ] ,
    [ 58, 336 ] ,
    [ 58, 336 ] ,
    [ 52, 346 ] ,
    [ 52, 346 ] ,
    [ 44, 356 ] ,
    [ 44, 356 ] ,
    [ 39, 366 ] ,
    [ 35, 371 ] ,
    [ 35, 371 ] ,
    [ 30, 380 ] ,
    [ 28, 387 ] ,
    [ 28, 387 ] ,
    [ 29, 391 ] ,
    [ 29, 391 ] ,
    [ 33, 396 ] ,
    [ 36, 397 ] ,
    [ 36, 397 ] ,
    [ 45, 397 ] ,
    [ 45, 397 ] ,
    [ 52, 392 ] ,
    [ 55, 385 ] ,
    [ 55, 385 ] ,
    [ 63, 374 ] ,
    [ 63, 374 ] ,
    [ 63, 374 ] ,
    [ 75, 356 ] ,
    [ 75, 356 ] ,
    [ 75, 356 ] ,
    [ 83, 361 ] ,
    [ 77, 368 ] ,
    [ 77, 368 ] ,
    [ 77, 368 ] ,
    [ 77, 368 ] ,
    [ 78, 367 ] ,
    [ 78, 367 ] ,
    [ 82, 371 ] ,
    [ 82, 371 ] ,
    [ 82, 371 ] ,
    [ 82, 371 ] ,
    [ 82, 371 ] ,
    [ 82, 371 ] 

    
      ];
      
// Find the minimum and maximum values of x and y coordinates
let minX = Infinity;
let minY = Infinity;
let maxX = -Infinity;
let maxY = -Infinity;

coordinates.forEach(([x, y]) => {
  if (x !== null && y !== null) {
    if (x < minX) minX = x;
    if (y < minY) minY = y;
    if (x > maxX) maxX = x;
    if (y > maxY) maxY = y;
  }
});

// Calculate canvas size based on coordinate range
const canvasWidth = maxX - minX + 10; // Add some padding for better visibility
const canvasHeight = maxY - minY + 10;

// Set up the canvas with white background
const canvas = createCanvas(canvasWidth, canvasHeight, 'png');
const ctx = canvas.getContext('2d');
ctx.fillStyle = 'white';
ctx.fillRect(0, 0, canvasWidth, canvasHeight);

// Set the line color and width
ctx.strokeStyle = 'black';
ctx.lineWidth = 2;

// Adjust the coordinate values to fit within the canvas
const adjustedCoordinates = coordinates.map(([x, y]) => {
  if (x !== null && y !== null) {
    return [x - minX + 5, y - minY + 5];
  }
  return null;
});

// Connect the adjusted coordinates and store line coordinates
ctx.beginPath();
let isIsland = false;

adjustedCoordinates.forEach((coordinate) => {
  if (coordinate === null) {
    if (!isIsland) {
      ctx.stroke();
      ctx.beginPath();
      isIsland = true;
    }
  } else {
    if (isIsland) {
      ctx.moveTo(coordinate[0], coordinate[1]);
      isIsland = false;
    }
    ctx.lineTo(coordinate[0], coordinate[1]);
  }
});

ctx.stroke();

// Save the canvas as an image
const fs = require('fs');
const out = fs.createWriteStream(__dirname + '/path.jpg');
const stream = canvas.createJPEGStream();
stream.pipe(out);
out.on('finish', () => console.log('Image created: path.jpg'));

// Use the line coordinates as needed
console.log('Line coordinates:', adjustedCoordinates.filter(coordinate => coordinate !== null));

// Open the output file
const outputStream = fs.createWriteStream('output.txt');

// Write the coordinates to the file
coordinates.forEach(coordinate => {
  outputStream.write(`[ ${coordinate[0]}, ${coordinate[1]} ],\n`);
});

// Calculate the distance along the blue line between two points
function calculateDistanceAlongLine(startIndex, endIndex) {
  let distance = 0;
  for (let i = startIndex; i < endIndex; i++) {
    const x1 = coordinates[i][0];
    const y1 = coordinates[i][1];
    const x2 = coordinates[i + 1][0];
    const y2 = coordinates[i + 1][1];
    const dx = x2 - x1;
    const dy = y2 - y1;
    distance += Math.sqrt(dx * dx + dy * dy);
  }
  return distance;
}

// Example usage: calculate distance between points at index 10 and 20
const startIndex = 10;
const endIndex = 20;
const distance = calculateDistanceAlongLine(startIndex, endIndex);

console.log(`Distance along the blue line between points ${startIndex} and ${endIndex}: ${distance}`);

// Close the output file
outputStream.end();